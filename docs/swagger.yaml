definitions:
  controllers.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  controllers.CreateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - category_id
    - name
    - price
    - stock
    type: object
  controllers.CreateProductResponse:
    properties:
      data:
        $ref: '#/definitions/models.ProductResponse'
      message:
        type: string
    type: object
  controllers.DeleteProductResponse:
    properties:
      data:
        $ref: '#/definitions/models.ProductResponse'
      message:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      errorCode:
        type: string
      message:
        type: string
    type: object
  controllers.ListProductsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ProductResponse'
        type: array
      message:
        type: string
    type: object
  controllers.ShowProductResponse:
    properties:
      data:
        $ref: '#/definitions/models.ProductResponse'
      message:
        type: string
    type: object
  controllers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  controllers.UpdateProductRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    required:
    - category_id
    - name
    - price
    - stock
    type: object
  controllers.UpdateProductResponse:
    properties:
      data:
        $ref: '#/definitions/models.ProductResponse'
      message:
        type: string
    type: object
  models.Category:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.ProductResponse:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      deteledAt:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      description: Get a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get all categories
      tags:
      - categories
  /category:
    delete:
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Delete a category by ID
      tags:
      - category
    get:
      description: Get a category by its ID
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get category by ID
      tags:
      - category
    post:
      consumes:
      - application/json
      description: Create a new category with the given details
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create a new category
      tags:
      - category
    put:
      description: update details of an existing category
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/controllers.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Category'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update a existing category
      tags:
      - category
  /product:
    delete:
      consumes:
      - application/json
      description: Delete a new job product
      parameters:
      - description: Product identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DeleteProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Delete product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Show a job product
      parameters:
      - description: Product identification
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ShowProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Show product
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create a new job product
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CreateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create product
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update a job product
      parameters:
      - description: Product Identification
        in: query
        name: id
        required: true
        type: string
      - description: Product data to Update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update product
      tags:
      - Product
  /products:
    get:
      consumes:
      - application/json
      description: List all job products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ListProductsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: List products
      tags:
      - Products
swagger: "2.0"
